setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1<- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianTourneyOpponentDiff <- function(t) {#
	t1<- subset(tourneyOpponentGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(tourneyOpponentGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianTourneyOpponentDiff('Duke')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1<- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianTourneyOpponentDiff <- function(t) {#
	t1<- subset(tourneyOpponentGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(tourneyOpponentGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianTourneyOpponentDiff('Louisville')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1<- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianTourneyOpponentDiff <- function(t) {#
	t1<- subset(tourneyOpponentGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(tourneyOpponentGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames('Louisville')#
medianTourneyOpponentDiff('Louisville')
length(tourneyOpponentGames('Louisville'))
tourneyOpponentGames('Louisville')
numRow(tourneyOpponentGames('Louisville'))
nrow(tourneyOpponentGames('Louisville'))
nrow(tourneyOpponentGames('Albany'))
nrow(tourneyOpponentGames('Vermont'))
nrow(tourneyOpponentGames('Connecticut'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(team1 %in% confTeams && team2 %in% bracket$team)]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(team1 %in% bracket$team & team2 %in% confTeams)]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff('America East')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	print(confTeams)#
	t1 <- score[(team1 %in% confTeams && team2 %in% bracket$team)]#
	print(t1)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	print(t1Diffs)#
	t2 <- score[(team1 %in% bracket$team & team2 %in% confTeams)]#
	print(t2)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	print(t2Diffs)#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff('America East')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	print(confTeams)#
	t1 <- score[(team1 %in% confTeams & team2 %in% bracket$team)]#
	print(t1)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	print(t1Diffs)#
	t2 <- score[(team1 %in% bracket$team & team2 %in% confTeams)]#
	print(t2)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	print(t2Diffs)#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff('America East')
confTeams <- teamsInConference(c)
confTeams <- teamsInConference('America East')
t1 <- score[(team1 %in% confTeams & team2 %in% bracket$team)]
t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team)]
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	print(confTeams)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	print(t1)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	print(t1Diffs)#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	print(t2)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	print(t2Diffs)#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff('America East')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff('Atlantic Coast')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff('Big 10')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Louisville'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Syracuse'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Kansas'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Kentucky'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define a "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Kentucky'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define a "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Kansas'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define a "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Louisville'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define a "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Witchita St'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define a "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Wichita St'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define a "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Wichita State'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define a "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	print(t1)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	print(t2)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Wichita State'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Wichita State'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
medianConferenceVsTourneyDiff(conference('Kansas'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
teamsInconference('Kansas'))#
medianConferenceVsTourneyDiff(conference('Kansas'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
teamsInconference('Kansas')#
medianConferenceVsTourneyDiff(conference('Kansas'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
teamsInConference('Kansas')#
medianConferenceVsTourneyDiff(conference('Kansas'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
teamsInConference(conference('Kansas'))#
medianConferenceVsTourneyDiff(conference('Kansas'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
teamsInConference(conference('Kansas'))#
medianConferenceVsTourneyDiff(conference('Kansas'))#
teamsInConference(conference('Wichita State'))#
medianConferenceVsTourneyDiff(conference('Wichita State'))
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
teamsInConference(conference('Kansas'))#
medianConferenceVsTourneyDiff(conference('Kansas'))#
teamsInConference(conference('Wichita State'))#
medianConferenceVsTourneyDiff(conference('Wichita State'))#
teamsInConference(conference('Kentucky'))#
medianConferenceVsTourneyDiff(conference('Kentucky'))
teamsInConference(conference('Wichita State'))#
medianConferenceVsTourneyDiff(conference('Wichita State'))#
medianInConferenceDiff('Wichita State')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tournyDiff + inConfDiff)#
}#
#
spread('Kansas')
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tournyDiff + inConfDiff)#
}
spread('Kansas')
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Kansas')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Albany')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Louisville')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Arizona')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Kentucky')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Wichita State')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Albany')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Kentucky')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Kentucky')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Kentucky')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Albany')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Wichita')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Wichita State')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Arizona')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Louisville')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Arizona')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Connecticut')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Wisconsin')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
spread('Dayton')
adjustedDiffs <- function(t) {#
	apply(allScores(t), 1, function(game) {#
		return team1_score;#
	})#
}
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustedDiffs <- function(t) {#
	apply(allScores(t), 1, function(game)#
		return team1_score;#
	)#
}
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjust(game)))#
}#
#
adjust <- function(game) {#
	return game$team1_score	#
}#
#
adjustedDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjust(game)))#
}#
#
adjust <- function(game) {#
	return(game$team1_score)#
}#
#
adjustedDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjust)#
}#
#
adjust <- function(game) {#
	return(game$team1_score)#
}#
#
adjustedDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 1, function(x) adjust(x))#
}#
#
adjust <- function(game) {#
	return(game$team1_score)#
}#
#
adjustedDiffs('Vermont')
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 1, function(x) adjust(x))#
}
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 1, function(x) adjust(x))#
}#
#
adjust <- function(game) {#
	return(game$team1_score)#
}#
#
adjustedDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 1, function(x) adjust(x))#
}#
#
adjust <- function(x) {#
	return(x$team1_score)#
}#
#
adjustedDiffs('Vermont')
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 1, function(x) adjust(x))#
}
{}
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 1, function(x) adjust(x))#
}
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 1, function(x) adjust(x)))#
}#
#
adjust <- function(x) {#
	return(x$team1_score)#
}#
#
adjustedDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 1, function(x) adjust(x)))#
}#
#
adjust <- function(x) {#
	print(x)#
}#
#
adjustedDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 2, function(x) adjust(x)))#
}#
#
adjust <- function(x) {#
	print(x)#
}#
#
adjustedDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 2, function(x) adjust(x)))#
}#
#
adjust <- function(x) {#
	print(x[1])#
}#
#
adjustedDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustedDiffs <- function(t) {#
	return(apply(allScores(t), 1, function(x) adjust(x)))#
}#
#
adjust <- function(x) {#
	print(x[1])#
}#
#
adjustedDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	print(x[1])#
}#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustedDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	print(x)#
}#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustedDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	print(x$team1)#
}#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustedDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	print(x$team1)#
}#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	x <- data.frame(x)#
	print(x$team1)#
}#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	#row is converted from data frame to matrix#
	print(x[3])#
}#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustAllDiffs('Vermont')
adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	#row is converted from data frame to matrix#
	print(x[3])#
}#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustAllDiffs('Vermont')
names(score)
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	#row is converted from data frame to matrix#
	TEAM1 = 3#
	TEAM2#
	print(x[0])#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustAllDiffs('Vermont')
names(score)
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	#row is converted from data frame to matrix#
	print(x[0])#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	#row is converted from data frame to matrix#
	print(x[1])#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	#row is converted from data frame to matrix#
	TEAM1 = 3#
	TEAM2 = 5#
	print(x[1])#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	#row is converted from data frame to matrix#
	TEAM1 = 3#
	TEAM2 = 5#
	print(x[TEAM1])#
	print(x[TEAM2])#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	#row is converted from data frame to matrix#
	TEAM1 = 3#
	TEAM2 = 5#
	print(x[TEAM2])#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x) {#
	#row is converted from data frame to matrix#
	TEAM1 = 3#
	TEAM2 = 5#
	print(x[TEAM1])#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, adjustDiff))#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x, t) {#
	#row is converted from data frame to matrix#
	TEAM1 = 3#
	TEAM2 = 5#
	print(x[TEAM1])#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, function(t) adjustDiff(t)))#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x, t) {#
	#row is converted from data frame to matrix#
	TEAM1 = 3#
	TEAM2 = 5#
	if(x[TEAM1] == t) {#
		print(x[TEAM1])#
	}#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, function(t) adjustDiff(t)))#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x, t) {#
	print(t)#
	#row is converted from data frame to matrix#
	TEAM1 = 3#
	TEAM2 = 5#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, function(t) adjustDiff(t)))#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x, t) {#
	print(t)#
	#row is converted from data frame to matrix#
	TEAM1 = 3#
	TEAM2 = 5#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	return(apply(allScores(t), 1, function() adjustDiff(t)))#
}#
#
adjustAllDiffs('Vermont')
scores = allScores(t)
}
scores = allScores(t)
scores = allScores('Vermont')
cbind(a=0, df)
cbind(a=0, scores)
scores
scores$team1_score - scores$team2_score
t = 'Vermont'#
scores = allScores(t)#
t1 <- subset(scores, team1==t)
t1
spread1 <- spread(scores$team2)
scores = allScores(t)
t1 <- subset(scores, team1==t)
spread1 <- lapply(scores$team2, spread)
spread1
spread1 <- sapply(scores$team2, spread)
spread1
spread1 <- apply(scores$team2, spread)
spread1 <- unlist(lapply(scores$team2, spread))
spread1
t1
t1Scores <- t1$team1_score
t1Scores
spread1 <- unlist(lapply(scores$team2, spread))
t1Diffs <- t1$team1_score - t1$team2_score + spread
spread1 <- unlist(lapply(scores$team2, spread))
t1Diffs <- t1$team1_score - t1$team2_score + spread1
t1Diffs <- t1$team1_score - t1$team2_score
t1Diffs
t1$team1_score
t1$team2_score
spread1
spread1 <- unlist(lapply(t1$team2, spread))
spread1
t1$team2
spread("Sonoma State")
conference("Sonoma State")
t1Diffs <- t1$team1_score - t1$team2_score - spread1
t1Diffs
t1Diffs <- t1$team1_score - t1$team2_score + spread1
t2 <- subset(scores, team2==t)#
t2Scores <- t1$team2_score#
spread2 <- unlist(lapply(t1$team1, spread))#
t2Diffs <- t1$team2_score - t1$team1_score + spread2
t2
spread2
t2Diffs
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x, t) {#
	print(t)#
	#row is converted from data frame to matrix#
	TEAM1 = 3#
	TEAM2 = 5#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	scores = allScores(t)#
}#
#
t = 'Vermont'#
scores = allScores(t)#
t1 <- subset(scores, team1==t)#
t1Scores <- t1$team1_score#
spread1 <- unlist(lapply(t1$team2, spread))#
t1Diffs <- t1$team1_score - t1$team2_score + spread1#
#
t2 <- subset(scores, team2==t)#
t2#
t2Scores <- t1$team2_score#
spread2 <- unlist(lapply(t1$team1, spread))#
spread2#
t2Diffs <- t1$team2_score - t1$team1_score + spread2#
t2Diffs
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x, t) {#
	print(t)#
	#row is converted from data frame to matrix#
	TEAM1 = 3#
	TEAM2 = 5#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	scores = allScores(t)#
}#
#
t = 'Vermont'#
scores = allScores(t)#
t1 <- subset(scores, team1==t)#
t1Scores <- t1$team1_score#
spread1 <- unlist(lapply(t1$team2, spread))#
t1Diffs <- t1$team1_score - t1$team2_score + spread1#
#
t2 <- subset(scores, team2==t)#
t2#
t2Scores <- t1$team2_score#
spread2 <- unlist(lapply(t2$team1, spread))#
spread2#
t2Diffs <- t1$team2_score - t1$team1_score + spread2#
t2Diffs
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
#adjust the scoring differential based on point spread#
adjustDiff <- function(x, t) {#
	print(t)#
	#row is converted from data frame to matrix#
	TEAM1 = 3#
	TEAM2 = 5#
}#
#
names(score)#
#
adjustAllDiffs <- function(t) {#
	scores = allScores(t)#
}#
#
t = 'Vermont'#
scores = allScores(t)#
t1 <- subset(scores, team1==t)#
t1Scores <- t1$team1_score#
spread1 <- unlist(lapply(t1$team2, spread))#
t1Diffs <- t1$team1_score - t1$team2_score + spread1#
#
t2 <- subset(scores, team2==t)#
t2#
t2Scores <- t1$team2_score#
spread2 <- unlist(lapply(t2$team1, spread))#
spread2#
t2Diffs <- t2$team2_score - t2$team1_score + spread2#
t2Diffs
t = 'Vermont'#
scores = allScores(t)#
t1 <- subset(scores, team1==t)#
t1#
t1Scores <- t1$team1_score#
spread1 <- unlist(lapply(t1$team2, spread))#
spread1#
t1Diffs <- t1$team1_score - t1$team2_score + spread1#
t1Diffs
t = 'Vermont'#
scores = allScores(t)#
t1 <- subset(scores, team1==t)#
t1Scores <- t1$team1_score#
spread1 <- unlist(lapply(t1$team2, spread))#
t1Diffs <- t1$team1_score - t1$team2_score + spread1#
t1
t = 'Vermont'#
scores = allScores(t)#
t1 <- subset(scores, team1==t)#
t1Scores <- t1$team1_score#
spread1 <- unlist(lapply(t1$team2, spread))#
t1Diffs <- t1$team1_score - t1$team2_score + spread1#
test <- cbind(adjusted_diff=t1Diffs, t1)
test
t = 'Vermont'#
scores = allScores(t)#
t1 <- subset(scores, team1==t)#
t1Scores <- t1$team1_score#
spread1 <- unlist(lapply(t1$team2, spread))#
t1Diffs <- t1$team1_score - t1$team2_score + spread1#
t1 <- cbind(adjusted_diff=t1Diffs, t1)#
#
t2 <- subset(scores, team2==t)#
t2Scores <- t1$team2_score#
spread2 <- unlist(lapply(t2$team1, spread))#
t2Diffs <- t2$team2_score - t2$team1_score + spread2#
t2 <- cbind(adjusted_diff=t2Diffs, t2)#
#
rbind(t1, t2)
t = 'Vermont'#
scores = allScores(t)#
t1 <- subset(scores, team1==t)#
t1Scores <- t1$team1_score#
spread1 <- unlist(lapply(t1$team2, spread))#
t1Diffs <- t1$team1_score - t1$team2_score + spread1#
t1 <- cbind(spread=spread1, t1)#
t1 <- cbind(adjusted_diff=t1Diffs, t1)#
#
t2 <- subset(scores, team2==t)#
t2Scores <- t1$team2_score#
spread2 <- unlist(lapply(t2$team1, spread))#
t2Diffs <- t2$team2_score - t2$team1_score + spread2#
t2 <- cbind(spread=spread2, t2)#
t2 <- cbind(adjusted_diff=t2Diffs, t2)#
#
rbind(t1, t2)
t = 'Vermont'#
scores = allScores(t)#
t1 <- subset(scores, team1==t)#
t1Scores <- t1$team1_score#
spread1 <- unlist(lapply(t1$team2, spread))#
t1Diffs <- t1$team1_score - t1$team2_score#
t1AdjDiffs <- t1$team1_score - t1$team2_score + spread1#
t1 <- cbind(spread=spread1, t1)#
t1 <- cbind(diff=t1Diffs, t1)#
t1 <- cbind(adjusted_diff=t1AdjDiffs, t1)#
#
t2 <- subset(scores, team2==t)#
t2Scores <- t2$team2_score#
spread2 <- unlist(lapply(t2$team1, spread))#
t2Diffs <- t2$team2_score - t2$team1_score#
t2AdjDiffs <- t2$team2_score - t2$team1_score + spread2#
t2 <- cbind(spread=spread2, t2)#
t2 <- cbind(diff=t2Diffs, t2)#
t2 <- cbind(adjusted_diff=t2AdjDiffs, t2)#
#
rbind(t1, t2)
adjustAllDiffs('Vermont')
adjustAllDiffs <- function(t) {#
	scores = allScores(t)#
	t1 <- subset(scores, team1==t)#
	t1Scores <- t1$team1_score#
	spread1 <- unlist(lapply(t1$team2, spread))#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t1AdjDiffs <- t1$team1_score - t1$team2_score + spread1#
	t1 <- cbind(spread=spread1, t1)#
	t1 <- cbind(diff=t1Diffs, t1)#
	t1 <- cbind(adjusted_diff=t1AdjDiffs, t1)#
	t2 <- subset(scores, team2==t)#
	t2Scores <- t2$team2_score#
	spread2 <- unlist(lapply(t2$team1, spread))#
	t2Diffs <- t2$team2_score - t2$team1_score#
	t2AdjDiffs <- t2$team2_score - t2$team1_score + spread2#
	t2 <- cbind(spread=spread2, t2)#
	t2 <- cbind(diff=t2Diffs, t2)#
	t2 <- cbind(adjusted_diff=t2AdjDiffs, t2)#
	return(rbind(t1, t2))#
}#
#
adjustAllDiffs('Vermont')
adjustAllDiffs('Duke')
adjustEntireScoreDataframe <- function() {#
	teams <- bracket$team#
	for(i in length(teams) {#
		print(teams[i])#
	}#
}
adjustEntireScoreDataframe <- function() {#
	teams <- bracket$team#
	for(i in length(teams)) {#
		print(teams[i])#
	}#
}
adjustEntireScoreDataframe()
length(bracket$team)
adjustAllDiffs <- function(t) {#
	scores = allScores(t)#
	t1 <- subset(scores, team1==t)#
	t1Scores <- t1$team1_score#
	spread1 <- unlist(lapply(t1$team2, spread))#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t1AdjDiffs <- t1$team1_score - t1$team2_score + spread1#
	t1Out <- c(t1$team1)#
	t1Out <- cbind(spread=spread1, t1)#
	t1Out <- cbind(diff=t1Diffs, t1)#
	t1Out <- cbind(adjusted_diff=t1AdjDiffs, t1)#
	t2 <- subset(scores, team2==t)#
	t2Scores <- t2$team2_score#
	spread2 <- unlist(lapply(t2$team1, spread))#
	t2Diffs <- t2$team2_score - t2$team1_score#
	t2AdjDiffs <- t2$team2_score - t2$team1_score + spread2#
	t1Out <- c(t2$team2)#
	t2Out <- cbind(spread=spread2, t2)#
	t2Out <- cbind(diff=t2Diffs, t2)#
	t2Out <- cbind(adjusted_diff=t2AdjDiffs, t2)#
	return(rbind(t1Out, t2Out))#
}
adjustAllDiffs <- function(t) {#
	scores = allScores(t)#
	t1 <- subset(scores, team1==t)#
	t1Scores <- t1$team1_score#
	spread1 <- unlist(lapply(t1$team2, spread))#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t1AdjDiffs <- t1$team1_score - t1$team2_score + spread1#
	t1Out <- c(t1$team1)#
	t1Out <- cbind(spread=spread1, t1)#
	t1Out <- cbind(diff=t1Diffs, t1)#
	t1Out <- cbind(adjusted_diff=t1AdjDiffs, t1)#
	t2 <- subset(scores, team2==t)#
	t2Scores <- t2$team2_score#
	spread2 <- unlist(lapply(t2$team1, spread))#
	t2Diffs <- t2$team2_score - t2$team1_score#
	t2AdjDiffs <- t2$team2_score - t2$team1_score + spread2#
	t2Out <- c(t2$team2)#
	t2Out <- cbind(spread=spread2, t2)#
	t2Out <- cbind(diff=t2Diffs, t2)#
	t2Out <- cbind(adjusted_diff=t2AdjDiffs, t2)#
	return(rbind(t1Out, t2Out))#
}
adjustAllDiffs('Vermont')
adjustAllDiffs <- function(t) {#
	scores = allScores(t)#
	t1 <- subset(scores, team1==t)#
	t1Scores <- t1$team1_score#
	spread1 <- unlist(lapply(t1$team2, spread))#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t1AdjDiffs <- t1$team1_score - t1$team2_score + spread1#
	t1Out <- c(team1=t1$team1)#
	t1Out <- cbind(spread=spread1, t1)#
	t1Out <- cbind(diff=t1Diffs, t1)#
	t1Out <- cbind(adjusted_diff=t1AdjDiffs, t1)#
	t2 <- subset(scores, team2==t)#
	t2Scores <- t2$team2_score#
	spread2 <- unlist(lapply(t2$team1, spread))#
	t2Diffs <- t2$team2_score - t2$team1_score#
	t2AdjDiffs <- t2$team2_score - t2$team1_score + spread2#
	t2Out <- c(team1=t2$team2)#
	t2Out <- cbind(spread=spread2, t2)#
	t2Out <- cbind(diff=t2Diffs, t2)#
	t2Out <- cbind(adjusted_diff=t2AdjDiffs, t2)#
	return(rbind(t1Out, t2Out))#
}#
#
adjustAllDiffs('Vermont')
adjustAllDiffs <- function(t) {#
	scores = allScores(t)#
	t1 <- subset(scores, team1==t)#
	t1Scores <- t1$team1_score#
	spread1 <- unlist(lapply(t1$team2, spread))#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t1AdjDiffs <- t1$team1_score - t1$team2_score + spread1#
	t1Out <- c(team1=t1$team1)#
	t1Out <- cbind(spread=spread1, t1Out)#
	t1Out <- cbind(diff=t1Diffs, t1Out)#
	t1Out <- cbind(adjusted_diff=t1AdjDiffs, t1Out)#
	t2 <- subset(scores, team2==t)#
	t2Scores <- t2$team2_score#
	spread2 <- unlist(lapply(t2$team1, spread))#
	t2Diffs <- t2$team2_score - t2$team1_score#
	t2AdjDiffs <- t2$team2_score - t2$team1_score + spread2#
	t2Out <- c(team1=t2$team2)#
	t2Out <- cbind(spread=spread2, t2Out)#
	t2Out <- cbind(diff=t2Diffs, t2Out)#
	t2Out <- cbind(adjusted_diff=t2AdjDiffs, t2Out)#
	return(rbind(t1Out, t2Out))#
}
adjustAllDiffs('Vermont')
adjustAllDiffs <- function(t) {#
	scores = allScores(t)#
	t1 <- subset(scores, team1==t)#
	t1Scores <- t1$team1_score#
	spread1 <- unlist(lapply(t1$team2, spread))#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t1AdjDiffs <- t1$team1_score - t1$team2_score + spread1#
	t1Out <- c()#
	t1Out <- cbind(team1=t1$team1)#
	t1Out <- cbind(spread=spread1, t1Out)#
	t1Out <- cbind(diff=t1Diffs, t1Out)#
	t1Out <- cbind(adjusted_diff=t1AdjDiffs, t1Out)#
	t2 <- subset(scores, team2==t)#
	t2Scores <- t2$team2_score#
	spread2 <- unlist(lapply(t2$team1, spread))#
	t2Diffs <- t2$team2_score - t2$team1_score#
	t2AdjDiffs <- t2$team2_score - t2$team1_score + spread2#
	t2Out <- c()#
	t2Out <- cbind(team1=t2$team2)#
	t2Out <- cbind(spread=spread2, t2Out)#
	t2Out <- cbind(diff=t2Diffs, t2Out)#
	t2Out <- cbind(adjusted_diff=t2AdjDiffs, t2Out)#
	return(rbind(t1Out, t2Out))#
}
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores = allScores(t)#
	t1 <- subset(scores, team1==t)#
	t1Scores <- t1$team1_score#
	spread1 <- unlist(lapply(t1$team2, spread))#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t1AdjDiffs <- t1$team1_score - t1$team2_score + spread1#
	t1Out <- c()#
	t1Out <- cbind(team1=t1$team1)#
	t1Out <- cbind(diff=t1Diffs, t1Out)#
	t1Out <- cbind(spread=spread1, t1Out)#
	t1Out <- cbind(adjusted_diff=t1AdjDiffs, t1Out)#
	t2 <- subset(scores, team2==t)#
	t2Scores <- t2$team2_score#
	spread2 <- unlist(lapply(t2$team1, spread))#
	t2Diffs <- t2$team2_score - t2$team1_score#
	t2AdjDiffs <- t2$team2_score - t2$team1_score + spread2#
	t2Out <- c()#
	t2Out <- cbind(team1=t2$team2)#
	t2Out <- cbind(diff=t2Diffs, t2Out)#
	t2Out <- cbind(spread=spread2, t2Out)#
	t2Out <- cbind(adjusted_diff=t2AdjDiffs, t2Out)#
	return(rbind(t1Out, t2Out))#
}#
#
adjustAllDiffs('Vermont')#
#
adjustEntireScoreDataframe <- function() {#
	teams <- bracket$team#
#
	for(i in length(teams)) {#
		print(teams[i])#
	}#
}#
#
length(bracket$team)#
#
adjustEntireScoreDataframe()
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
spread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores = allScores(t)#
	t1 <- subset(scores, team1==t)#
	t1Scores <- t1$team1_score#
	spread1 <- unlist(lapply(t1$team2, spread))#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t1AdjDiffs <- t1$team1_score - t1$team2_score + spread1#
	t1Out <- c()#
	t1Out <- cbind(team1=t1$team1)#
	t1Out <- cbind(adjusted_diff=t1AdjDiffs, t1Out)#
	t1Out <- cbind(spread=spread1, t1Out)#
	t1Out <- cbind(diff=t1Diffs, t1Out)#
	t2 <- subset(scores, team2==t)#
	t2Scores <- t2$team2_score#
	spread2 <- unlist(lapply(t2$team1, spread))#
	t2Diffs <- t2$team2_score - t2$team1_score#
	t2AdjDiffs <- t2$team2_score - t2$team1_score + spread2#
	t2Out <- c()#
	t2Out <- cbind(team1=t2$team2)#
	t2Out <- cbind(adjusted_diff=t2AdjDiffs, t2Out)#
	t2Out <- cbind(spread=spread2, t2Out)#
	t2Out <- cbind(diff=t2Diffs, t2Out)#
	return(rbind(t1Out, t2Out))#
}#
#
adjustAllDiffs('Vermont')#
#
adjustEntireScoreDataframe <- function() {#
	teams <- bracket$team#
#
	for(i in length(teams)) {#
		print(teams[i])#
	}#
}#
#
length(bracket$team)#
#
adjustEntireScoreDataframe()
adjustAllDiffs <- function(t) {#
	out <- cbind(spread=lapply(score$team2, spread), score)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs()
adjustAllDiffs <- function(t) {#
	out <- cbind(spread=lapply(score$team2, spread), score)#
	return(out)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs()
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	s = unlist(lapply(score$team2, spread))#
	out <- cbind(spread=s, score)#
	return(out)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs()
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores <- allScores(t)#
	s = unlist(lapply(scores$team2, spread))#
	out <- cbind(spread=s, score)#
	return(out)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs()
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores <- allScores(t)#
	s = unlist(lapply(scores$team2, spread))#
	out <- cbind(spread=s, score)#
	return(out)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores <- allScores(t)#
	s = unlist(lapply(scores$team2, spread))#
	#out <- cbind(spread=s, score)#
	return(s)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores <- allScores(t)#
	s = unlist(lapply(scores$team2, spread))#
	out <- cbind(spread=s, scores)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores <- allScores(t)#
	s = unlist(lapply(scores$team2, spread))#
	out <- cbind(spread=s, scores)#
	return(out)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
adjustAllDiffs <- function(t) {#
	scores <- allScores(t)#
	spread = unlist(lapply(scores$team2, getSpread))#
	out <- cbind(spread=s, scores)#
	adjusted_diff = scores$team1_score - scores$team2_score + s#
	out <- cbind(adjusted_diff=adjusted_diff)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
adjustAllDiffs <- function(t) {#
	scores <- allScores(t)#
	spread = unlist(lapply(scores$team2, getSpread))#
	out <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team1_score - scores$team2_score + s#
	out <- cbind(adjusted_diff=adjusted_diff)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
adjustAllDiffs <- function(t) {#
	scores <- allScores(t)#
	spread = unlist(lapply(scores$team2, getSpread))#
	out <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team1_score - scores$team2_score + spread#
	out <- cbind(adjusted_diff=adjusted_diff)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
adjustAllDiffs('Vermont')
adjustAllDiffs <- function(t) {#
	scores <- allScores(t)#
	spread = unlist(lapply(scores$team2, getSpread))#
	out <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team1_score - scores$team2_score + spread#
	out <- cbind(adjusted_diff=adjusted_diff)#
	return(out)#
	#TODO: Do this with team1 and team2 flipped#
}
adjustAllDiffs('Vermont')
adjustAllDiffs <- function(t) {#
	scores <- allScores(t)#
	spread = unlist(lapply(scores$team2, getSpread))#
	out <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team1_score - scores$team2_score + spread#
	out <- cbind(adjusted_diff=adjusted_diff, scores)#
	return(out)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores <- allScores(t)#
	spread = unlist(lapply(scores$team2, getSpread))#
	out <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team1_score - scores$team2_score + spread#
	out <- cbind(adjusted_diff=adjusted_diff, out)#
	return(out)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
team1Scores <- function(t) {#
	return(subset(score, team1==t)#
}#
#
team2Scores <- function(t) {#
	return(subset(score, team2==t)#
}#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores <- team1Scores(t)#
	spread = unlist(lapply(scores$team2, getSpread))#
	out1 <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team1_score - scores$team2_score + spread#
	out1 <- cbind(adjusted_diff=adjusted_diff, out1)#
	return(out1)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
team1Scores <- function(t) {#
	return(subset(score, team1==t))#
}#
#
team2Scores <- function(t) {#
	return(subset(score, team2==t))#
}#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores <- team1Scores(t)#
	spread = unlist(lapply(scores$team2, getSpread))#
	out1 <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team1_score - scores$team2_score + spread#
	out1 <- cbind(adjusted_diff=adjusted_diff, out1)#
	return(out1)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
team1Scores <- function(t) {#
	return(subset(score, team1==t))#
}#
#
team2Scores <- function(t) {#
	return(subset(score, team2==t))#
}#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores <- team1Scores(t)#
	spread = unlist(lapply(scores$team2, getSpread))#
	out1 <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team1_score - scores$team2_score + spread#
	out1 <- cbind(adjusted_diff=adjusted_diff, out1)#
	scores <- team2Scores(t)#
	spread = unlist(lapply(scores$team1, getSpread))#
	out2 <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team2_score - scores$team1_score + spread#
	out2 <- cbind(adjusted_diff=adjusted_diff, out2)#
	return(out2)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
team1Scores <- function(t) {#
	return(subset(score, team1==t))#
}#
#
team2Scores <- function(t) {#
	return(subset(score, team2==t))#
}#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores <- team1Scores(t)#
	spread = unlist(lapply(scores$team2, getSpread))#
	out1 <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team1_score - scores$team2_score + spread#
	out1 <- cbind(adjusted_diff=adjusted_diff, out1)#
	scores <- team2Scores(t)#
	spread = unlist(lapply(scores$team1, getSpread))#
	out2 <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team2_score - scores$team1_score + spread#
	out2 <- cbind(adjusted_diff=adjusted_diff, out2)#
	return(rbind(out1, out2)#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
team1Scores <- function(t) {#
	return(subset(score, team1==t))#
}#
#
team2Scores <- function(t) {#
	return(subset(score, team2==t))#
}#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores <- team1Scores(t)#
	spread = unlist(lapply(scores$team2, getSpread))#
	out1 <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team1_score - scores$team2_score + spread#
	out1 <- cbind(adjusted_diff=adjusted_diff, out1)#
	scores <- team2Scores(t)#
	spread = unlist(lapply(scores$team1, getSpread))#
	out2 <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team2_score - scores$team1_score + spread#
	out2 <- cbind(adjusted_diff=adjusted_diff, out2)#
	return(rbind(out1, out2))#
	#TODO: Do this with team1 and team2 flipped#
}#
#
adjustAllDiffs('Vermont')
setwd('/Users/mikerobideau/Desktop')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
#
#define "NOT IN" function#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
team1Scores <- function(t) {#
	return(subset(score, team1==t))#
}#
#
team2Scores <- function(t) {#
	return(subset(score, team2==t))#
}#
#
allScores <- function(t) {#
	return(subset(score, team1==t | team2==t))#
}#
#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(#
		(score$team1==t & score$team2 %in% teams) |#
		(score$team1 %in% teams & score$team2==t)#
	), ]#
	return(games)#
}#
#
medianInConferenceDiff <- function(t) { #
	t1 <- subset(inConferenceGames(t), team1==t)#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- subset(inConferenceGames(t), team2==t)#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
tourneyOpponentGames <- function(t) {#
	games <- score[(#
		(score$team1==t & score$team2 %in% bracket$team) |#
		(score$team1 %in% bracket$team & score$team2==t)#
	), ]#
	return(games)#
} #
#
#method 1: include games against tourney teams in conference#
medianConferenceVsTourneyDiff <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
#method 2: exclude games against tourney teams in conference#
medianConferenceVsTourneyDiff2 <- function(c) {#
	confTeams <- teamsInConference(c)#
	t1 <- score[(score$team1 %in% confTeams & score$team2 %in% bracket$team & score$team2 %!in% confTeams),]#
	t1Diffs <- t1$team1_score - t1$team2_score#
	t2 <- score[(score$team1 %in% bracket$team & score$team1 %!in% confTeams & score$team2 %in% confTeams),]#
	t2Diffs <- t2$team2_score - t2$team1_score#
	return(median(c(t1Diffs, t2Diffs)))#
}#
#
getSpread <- function(t) {#
	tourneyDiff <- medianConferenceVsTourneyDiff2(conference(t))#
	inConfDiff <- medianInConferenceDiff(t)#
	return(tourneyDiff + inConfDiff)#
}#
#
adjustAllDiffs <- function(t) {#
	scores <- team1Scores(t)#
	spread = unlist(lapply(scores$team2, getSpread))#
	out1 <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team1_score - scores$team2_score + spread#
	out1 <- cbind(adjusted_diff=adjusted_diff, out1)#
	scores <- team2Scores(t)#
	spread = unlist(lapply(scores$team1, getSpread))#
	out2 <- cbind(spread=spread, scores)#
	adjusted_diff = scores$team2_score - scores$team1_score + spread#
	out2 <- cbind(adjusted_diff=adjusted_diff, out2)#
	return(na.omit(rbind(out1, out2)))#
}#
#
adjustAllDiffs('Vermont')
Data#
setwd('C:/Users/robideau/Desktop/tmp')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2014.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2014.csv', header=TRUE, stringsAsFactors=FALSE) #
#We need a "%!in%" operation for later on#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#Duplicates the dataset with team 1 and team 2 flipped, then rbinds to original.  Team 2 always mean "opponent"#
mirror <- function(score) {#
  mirror <- data.frame(#
    record_id=score$record_id,#
    year=score$year,#
    team1=score$team2,#
    team1_score=score$team2_score,#
    team2=score$team1,#
    team2_score=score$team1_score#
  )#
  return(rbind(mirror, score))#
}#
#A team's conference#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#All teams in a conference#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#Games against a same-conference opponent#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(score$team1==t & score$team2 %in% teams), ]#
	return(games)#
}#
#Median scoring differential when playin an in conference opponent#
inConferenceDiff <- function(t) { #
	diffs <- inConferenceGames(t)$team1_score - inConferenceGames(t)$team2_score#
	return(median(diffs))#
}#
#Games against the bracket teams (TO DO: It's worth considering whether or not this should include in-conference#
#opponents)#
tourneyOpponentGames <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %in% bracket$team & score$team2 %!in% teamsInConference(c)), ]#
	return(games)#
} #
#conferenceDiff <- function(c, recursive) {#
#  if(recursive) {#
#    spread = unlist(lapply(tourneyOpponentGames(c)$team2, getSpread, recursive=FALSE))#
#    diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score + spread#
#  } else {#
#    diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
#  }#
#  #
#  return(median(diffs, na.rm=TRUE))#
#}#
##
#getSpread <- function(t, recursive) {#
#	return(conferenceDiff(conference(t), recursive) + inConferenceDiff(t))#
#}#
#Median scoring differential for a conference when playing a tournament team#
conferenceDiff <- function(c) {#
  diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
  return(median(diffs, na.rm=TRUE))#
}#
#Spread for one opponent#
getSpread <- function(t) {#
  confDiff <- conferenceDiff(conference(t))#
  inConfDiff <- inConferenceDiff(t)#
  return(confDiff + inConfDiff)#
}#
#Spread for each opponent in standings#
getAllSpread <- function() {#
  spread <- sapply(standing$team, getSpread)#
  df <- data.frame(team2=names(spread), spread=spread)#
  return(df)#
}
getAllSpread()
getSpread('Kentucky')
conferenceDiff <- function(c, recursive) {#
  if(recursive) {#
    spread = unlist(lapply(tourneyOpponentGames(c)$team2, getSpread, recursive=FALSE))#
    diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score + spread#
  } else {#
    diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
  }#
  return(median(diffs, na.rm=TRUE))#
}#
getSpread <- function(t, recursive) {#
	return(conferenceDiff(conference(t), recursive) + inConferenceDiff(t))#
}#
#Median scoring differential for a conference when playing a tournament team#
#conferenceDiff <- function(c) {#
#  diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
#  return(median(diffs, na.rm=TRUE))#
#}#
#Spread for one opponent#
#getSpread <- function(t) {#
#  confDiff <- conferenceDiff(conference(t))#
#  inConfDiff <- inConferenceDiff(t)#
#  return(confDiff + inConfDiff)#
#}#
#Spread for each opponent in standings#
getAllSpread <- function() {#
  spread <- sapply(standing$team, getSpread, true)#
  df <- data.frame(team2=names(spread), spread=spread)#
  return(df)#
}#
#
getSpread('Kentucky', true)
getSpread('Kentucky', TRUE)
conferenceDiff(conference('Kentucky'))
}#
#Median scoring differential for a conference when playing a tournament team#
conferenceDiff <- function(c) {#
  diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
  return(median(diffs, na.rm=TRUE))#
}#
#Spread for one opponent#
getSpread <- function(t) {#
  confDiff <- conferenceDiff(conference(t))#
  inConfDiff <- inConferenceDiff(t)#
  return(confDiff + inConfDiff)#
}#
#Spread for each opponent in standings#
getAllSpread <- function() {#
  spread <- sapply(standing$team, getSpread)#
  df <- data.frame(team2=names(spread), spread=spread)#
  return(df)#
}
conferenceDiff(conference('Kentucky'))
conferenceDiff(conference('Kansas'))
inConferenceDiff(conference('Kansas'))
inConferenceDiff('Kansas')
tourneyOpponentGames2 <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %in% bracket$team), ]#
	return(games)#
}
conferenceDiff <- function(c) {#
  diffs <- tourneyOpponentGames2(c)$team1_score - tourneyOpponentGames2(c)$team2_score #
  return(median(diffs, na.rm=TRUE))#
}
conferenceDiff(conference('Kansas'))
conferenceDiff <- function(c) {#
  diffs <- tourneyOpponentGames2(c)$team1_score - tourneyOpponentGames2(c)$team2_score #
  return(median(diffs, na.rm=TRUE))#
}
conferenceDiff(conference('Kansas'))
conferenceDiff(conference('Kentucky'))
conferenceDiff(conference('Duke'))
conferenceDiff(conference('Big 10'))
conferenceDiff(conference('Big10'))
conferenceDiff(conference('Big Ten'))
conferenceDiff(conference('Purdue'))
outConferenceGames <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %!in% teamsInConference(c), ]#
	return(games)#
}
conferenceDiff <- function(c) {#
  diffs <- outConferenceGames(c)$team1_score - outConferenceGames(c)$team2_score #
  return(median(diffs, na.rm=TRUE))#
}
conferenceDiff(conference('Purdue'))
outConferenceGames <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %!in% teamsInConference(c), ]#
	return(games)#
}
outConferenceGames <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %!in% teamsInConference(c)), ]#
	return(games)#
}
conferenceDiff <- function(c) {#
  diffs <- outConferenceGames(c)$team1_score - outConferenceGames(c)$team2_score #
  return(median(diffs, na.rm=TRUE))#
}
conferenceDiff(conference('Purdue'))
conferenceDiff(conference('Kanses'))
conferenceDiff(conference('Kansas'))
conferenceDiff(conference('Purdue'))
Spread for one opponent#
getSpread <- function(t) {#
  confDiff <- conferenceDiff(conference(t))#
  inConfDiff <- inConferenceDiff(t)#
  return(confDiff + inConfDiff)#
}#
#Spread for each opponent in standings#
getAllSpread <- function() {#
  spread <- sapply(standing$team, getSpread)#
  df <- data.frame(team2=names(spread), spread=spread)#
  return(df)#
}
getSpread('Kentucky')
getSpread('Louisville')
Data#
setwd('/Users/mikerobideau/Documents/Computer Science/Projects/Sports Analytics/Basketball/March Madness/2015')#
bracket <- read.csv('ncaa_d1_basketball_bracket_2015.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2015.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2015.csv', header=TRUE, stringsAsFactors=FALSE)
Data#
setwd('/Users/mikerobideau/Documents/Computer Science/Projects/Sports Analytics/Basketball/March Madness/2015')#
bracket <- read.csv('ncaa_bracket_2015.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2015.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2015.csv', header=TRUE, stringsAsFactors=FALSE)
We need a "%!in%" operation for later on#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#Duplicates the dataset with team 1 and team 2 flipped, then rbinds to original.  Team 2 always mean "opponent"#
mirror <- function(score) {#
  mirror <- data.frame(#
    record_id=score$record_id,#
    year=score$year,#
    team1=score$team2,#
    team1_score=score$team2_score,#
    team2=score$team1,#
    team2_score=score$team1_score#
  )#
  return(rbind(mirror, score))#
}#
#A team's conference#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#All teams in a conference#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#Games against a same-conference opponent#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(score$team1==t & score$team2 %in% teams), ]#
	return(games)#
}#
#Median scoring differential when playin an in conference opponent#
inConferenceDiff <- function(t) { #
	diffs <- inConferenceGames(t)$team1_score - inConferenceGames(t)$team2_score#
	return(median(diffs))#
}#
#Games against the bracket teams (TO DO: It's worth considering whether or not this should include in-conference#
#opponents)#
tourneyOpponentGames <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %in% bracket$team & score$team2 %!in% teamsInConference(c)), ]#
	return(games)#
} #
#
tourneyOpponentGames2 <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %in% bracket$team), ]#
	return(games)#
} #
#
outConferenceGames <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %!in% teamsInConference(c), ]#
	return(games)#
} #
#conferenceDiff <- function(c, recursive) {#
#  if(recursive) {#
#    spread = unlist(lapply(tourneyOpponentGames(c)$team2, getSpread, recursive=FALSE))#
#    diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score + spread#
#  } else {#
#    diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
#  }#
#  #
#  return(median(diffs, na.rm=TRUE))#
#}#
##
#getSpread <- function(t, recursive) {#
#	return(conferenceDiff(conference(t), recursive) + inConferenceDiff(t))#
#}#
#Median scoring differential for a conference when playing a tournament team#
conferenceDiff <- function(c) {#
  diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
  return(median(diffs, na.rm=TRUE))#
}#
#Spread for one opponent#
getSpread <- function(t) {#
  confDiff <- conferenceDiff(conference(t))#
  inConfDiff <- inConferenceDiff(t)#
  return(confDiff + inConfDiff)#
}#
#Spread for each opponent in standings#
getAllSpread <- function() {#
  spread <- sapply(standing$team, getSpread)#
  df <- data.frame(team2=names(spread), spread=spread)#
  return(df)#
}#
#
inConferenceDiff('Kansas')#
#Adjusts scoring differentials based on opponent spread.  Re-calcuates opponent spread based on their scoring differentials, and repeats#
#for a specified number of iterations#
iterAdjust <- function(iterations) {#
  for(i in 0:iterations){#
    if(i==0) {#
      allSpread <- getAllSpread() #for first iteration, use approximated spread#
    } else {#
      allSpread <- getAllMedianAdjustedDiff() #for all other iterations, spread is median scoring differential from previous iteration#
    }#
    merged <- merge(score, allSpread, by='team2')#
    adjusted <- cbind(#
      merged, adjusted_diff = merged$team1_score - merged$team2_score + merged$spread#
    )#
    medianAdjustedDiff <- function(t) {#
      return(median(subset(adjusted, team1==t)$adjusted_diff, na.rm=T))#
    }#
    getAllMedianAdjustedDiff <- function() {#
      spread <- sapply(standing$team, medianAdjustedDiff)#
      df <- data.frame(team2=names(spread), spread=spread)#
      return(df)#
    }#
  }#
  return(adjusted)#
}
inConferenceDiff('Kansas')
getSpread('Kentucky')
getSpread('Duke')
getSpread('Kansas')
getSpread('Arizona')
getSpread('Villanova')
getSpread('Harvard')
Data#
setwd('/Users/mikerobideau/Documents/Computer Science/Projects/Sports Analytics/Basketball/March Madness/2015')#
bracket <- read.csv('ncaa_bracket_2015.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2015.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2015.csv', header=TRUE, stringsAsFactors=FALSE) #
#We need a "%!in%" operation for later on#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#Duplicates the dataset with team 1 and team 2 flipped, then rbinds to original.  Team 2 always mean "opponent"#
mirror <- function(score) {#
  mirror <- data.frame(#
    record_id=score$record_id,#
    year=score$year,#
    team1=score$team2,#
    team1_score=score$team2_score,#
    team2=score$team1,#
    team2_score=score$team1_score#
  )#
  return(rbind(mirror, score))#
}#
#A team's conference#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#All teams in a conference#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#Games against a same-conference opponent#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(score$team1==t & score$team2 %in% teams), ]#
	return(games)#
}#
#Median scoring differential when playin an in conference opponent#
inConferenceDiff <- function(t) { #
	diffs <- inConferenceGames(t)$team1_score - inConferenceGames(t)$team2_score#
	return(median(diffs))#
}#
#Games against the bracket teams (TO DO: It's worth considering whether or not this should include in-conference#
#opponents)#
tourneyOpponentGames <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %in% bracket$team & score$team2 %!in% teamsInConference(c)), ]#
	return(games)#
} #
#
tourneyOpponentGames2 <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %in% bracket$team), ]#
	return(games)#
} #
#
outConferenceGames <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %!in% teamsInConference(c), ]#
	return(games)#
} #
#conferenceDiff <- function(c, recursive) {#
#  if(recursive) {#
#    spread = unlist(lapply(tourneyOpponentGames(c)$team2, getSpread, recursive=FALSE))#
#    diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score + spread#
#  } else {#
#    diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
#  }#
#  #
#  return(median(diffs, na.rm=TRUE))#
#}#
##
#getSpread <- function(t, recursive) {#
#	return(conferenceDiff(conference(t), recursive) + inConferenceDiff(t))#
#}#
#Median scoring differential for a conference when playing a tournament team#
conferenceDiff <- function(c) {#
  diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
  return(median(diffs, na.rm=TRUE))#
}#
#Spread for one opponent#
getSpread <- function(t) {#
  confDiff <- conferenceDiff(conference(t))#
  inConfDiff <- inConferenceDiff(t)#
  return(confDiff + inConfDiff)#
}#
#Spread for each opponent in standings#
getAllSpread <- function() {#
  spread <- sapply(standing$team, getSpread)#
  df <- data.frame(team2=names(spread), spread=spread)#
  return(df)#
}#
#Adjusts scoring differentials based on opponent spread.  Re-calcuates opponent spread based on their scoring differentials, and repeats#
#for a specified number of iterations#
iterAdjust <- function(iterations) {#
  for(i in 0:iterations){#
    if(i==0) {#
      allSpread <- getAllSpread() #for first iteration, use approximated spread#
    } else {#
      allSpread <- getAllMedianAdjustedDiff() #for all other iterations, spread is median scoring differential from previous iteration#
    }#
    merged <- merge(score, allSpread, by='team2')#
    adjusted <- cbind(#
      merged, adjusted_diff = merged$team1_score - merged$team2_score + merged$spread#
    )#
    medianAdjustedDiff <- function(t) {#
      return(median(subset(adjusted, team1==t)$adjusted_diff, na.rm=T))#
    }#
    getAllMedianAdjustedDiff <- function() {#
      spread <- sapply(standing$team, medianAdjustedDiff)#
      df <- data.frame(team2=names(spread), spread=spread)#
      return(df)#
    }#
  }#
  return(adjusted)#
}#
#Run script#
run <- function() {#
  score <- mirror(score)#
  adjusted <- iterAdjust(1)#
  write.csv(adjusted, 'ncaa_2015_diffs.csv')#
}#
run()
Data#
setwd('/Users/mikerobideau/Documents/Computer Science/Projects/Sports Analytics/Basketball/March Madness/2015')#
bracket <- read.csv('ncaa_bracket_2015.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2015.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2015.csv', header=TRUE, stringsAsFactors=FALSE) #
#We need a "%!in%" operation for later on#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#Duplicates the dataset with team 1 and team 2 flipped, then rbinds to original.  Team 2 always mean "opponent"#
mirror <- function(score) {#
  mirror <- data.frame(#
    record_id=score$record_id,#
    year=score$year,#
    team1=score$team2,#
    team1_score=score$team2_score,#
    team2=score$team1,#
    team2_score=score$team1_score#
  )#
  return(rbind(mirror, score))#
}#
#A team's conference#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#All teams in a conference#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#Games against a same-conference opponent#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(score$team1==t & score$team2 %in% teams), ]#
	return(games)#
}#
#Median scoring differential when playin an in conference opponent#
inConferenceDiff <- function(t) { #
	diffs <- inConferenceGames(t)$team1_score - inConferenceGames(t)$team2_score#
	return(median(diffs))#
}#
#Games against the bracket teams (TO DO: It's worth considering whether or not this should include in-conference#
#opponents)#
tourneyOpponentGames <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %in% bracket$team & score$team2 %!in% teamsInConference(c)), ]#
	return(games)#
} #
#
tourneyOpponentGames2 <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %in% bracket$team), ]#
	return(games)#
} #
#
outConferenceGames <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %!in% teamsInConference(c), ]#
	return(games)#
} #
#conferenceDiff <- function(c, recursive) {#
#  if(recursive) {#
#    spread = unlist(lapply(tourneyOpponentGames(c)$team2, getSpread, recursive=FALSE))#
#    diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score + spread#
#  } else {#
#    diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
#  }#
#  #
#  return(median(diffs, na.rm=TRUE))#
#}#
##
#getSpread <- function(t, recursive) {#
#	return(conferenceDiff(conference(t), recursive) + inConferenceDiff(t))#
#}#
#Median scoring differential for a conference when playing a tournament team#
conferenceDiff <- function(c) {#
  diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
  return(median(diffs, na.rm=TRUE))#
}#
#Spread for one opponent#
getSpread <- function(t) {#
  confDiff <- conferenceDiff(conference(t))#
  inConfDiff <- inConferenceDiff(t)#
  return(confDiff + inConfDiff)#
}#
#Spread for each opponent in standings#
getAllSpread <- function() {#
  spread <- sapply(standing$team, getSpread)#
  df <- data.frame(team2=names(spread), spread=spread)#
  return(df)#
}#
#Adjusts scoring differentials based on opponent spread.  Re-calcuates opponent spread based on their scoring differentials, and repeats#
#for a specified number of iterations#
iterAdjust <- function(iterations) {#
  for(i in 0:iterations){#
    if(i==0) {#
      allSpread <- getAllSpread() #for first iteration, use approximated spread#
    } else {#
      allSpread <- getAllMedianAdjustedDiff() #for all other iterations, spread is median scoring differential from previous iteration#
    }#
    merged <- merge(score, allSpread, by='team2')#
    adjusted <- cbind(#
      merged, adjusted_diff = merged$team1_score - merged$team2_score + merged$spread#
    )#
    medianAdjustedDiff <- function(t) {#
      return(median(subset(adjusted, team1==t)$adjusted_diff, na.rm=T))#
    }#
    getAllMedianAdjustedDiff <- function() {#
      spread <- sapply(standing$team, medianAdjustedDiff)#
      df <- data.frame(team2=names(spread), spread=spread)#
      return(df)#
    }#
  }#
  return(adjusted)#
}#
#Run script#
run <- function() {#
  score <- mirror(score)#
  adjusted <- iterAdjust(100)#
  write.csv(adjusted, 'ncaa_2015_diffs.csv')#
}#
run()
Data#
setwd('/Users/mikerobideau/Documents/Computer Science/Projects/Sports Analytics/Basketball/March Madness/2015')#
bracket <- read.csv('ncaa_bracket_2015.csv', header=TRUE, stringsAsFactors=FALSE)#
standing <- read.csv('ncaa_d1_basketball_standing_2015.csv', header=TRUE, stringsAsFactors=FALSE)#
score <- read.csv('ncaa_d1_basketball_score_2015.csv', header=TRUE, stringsAsFactors=FALSE) #
#We need a "%!in%" operation for later on#
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0#
#Duplicates the dataset with team 1 and team 2 flipped, then rbinds to original.  Team 2 always mean "opponent"#
mirror <- function(score) {#
  mirror <- data.frame(#
    record_id=score$record_id,#
    year=score$year,#
    team1=score$team2,#
    team1_score=score$team2_score,#
    team2=score$team1,#
    team2_score=score$team1_score#
  )#
  return(rbind(mirror, score))#
}#
#A team's conference#
conference <- function(t) {#
	return(subset(standing, team==t)$conference)#
}#
#All teams in a conference#
teamsInConference <- function(c) {#
	return(subset(standing, conference==c)$team)#
}#
#Games against a same-conference opponent#
inConferenceGames <- function(t) {#
	teams <- teamsInConference(conference(t))#
	games <- score[(score$team1==t & score$team2 %in% teams), ]#
	return(games)#
}#
#Median scoring differential when playin an in conference opponent#
inConferenceDiff <- function(t) { #
	diffs <- inConferenceGames(t)$team1_score - inConferenceGames(t)$team2_score#
	return(median(diffs))#
}#
#Games against the bracket teams (TO DO: It's worth considering whether or not this should include in-conference#
#opponents)#
tourneyOpponentGames <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %in% bracket$team & score$team2 %!in% teamsInConference(c)), ]#
	return(games)#
} #
#
tourneyOpponentGames2 <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %in% bracket$team), ]#
	return(games)#
} #
#
outConferenceGames <- function(c) {#
	games <- score[(score$team1 %in% teamsInConference(c) & score$team2 %!in% teamsInConference(c), ]#
	return(games)#
} #
#conferenceDiff <- function(c, recursive) {#
#  if(recursive) {#
#    spread = unlist(lapply(tourneyOpponentGames(c)$team2, getSpread, recursive=FALSE))#
#    diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score + spread#
#  } else {#
#    diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
#  }#
#  #
#  return(median(diffs, na.rm=TRUE))#
#}#
##
#getSpread <- function(t, recursive) {#
#	return(conferenceDiff(conference(t), recursive) + inConferenceDiff(t))#
#}#
#Median scoring differential for a conference when playing a tournament team#
conferenceDiff <- function(c) {#
  diffs <- tourneyOpponentGames(c)$team1_score - tourneyOpponentGames(c)$team2_score #
  return(median(diffs, na.rm=TRUE))#
}#
#Spread for one opponent#
getSpread <- function(t) {#
  confDiff <- conferenceDiff(conference(t))#
  inConfDiff <- inConferenceDiff(t)#
  return(confDiff + inConfDiff)#
}#
#Spread for each opponent in standings#
getAllSpread <- function() {#
  spread <- sapply(standing$team, getSpread)#
  df <- data.frame(team2=names(spread), spread=spread)#
  return(df)#
}#
#Adjusts scoring differentials based on opponent spread.  Re-calcuates opponent spread based on their scoring differentials, and repeats#
#for a specified number of iterations#
iterAdjust <- function(iterations) {#
  for(i in 0:iterations){#
    if(i==0) {#
      allSpread <- getAllSpread() #for first iteration, use approximated spread#
    } else {#
      allSpread <- getAllMedianAdjustedDiff() #for all other iterations, spread is median scoring differential from previous iteration#
    }#
    merged <- merge(score, allSpread, by='team2')#
    adjusted <- cbind(#
      merged, adjusted_diff = merged$team1_score - merged$team2_score + merged$spread#
    )#
    medianAdjustedDiff <- function(t) {#
      return(median(subset(adjusted, team1==t)$adjusted_diff, na.rm=T))#
    }#
    getAllMedianAdjustedDiff <- function() {#
      spread <- sapply(standing$team, medianAdjustedDiff)#
      df <- data.frame(team2=names(spread), spread=spread)#
      return(df)#
    }#
  }#
  return(adjusted)#
}#
#Run script#
run <- function() {#
  score <- mirror(score)#
  adjusted <- iterAdjust(1)#
  write.csv(adjusted, 'ncaa_2015_diffs.csv')#
}#
run()
subset(score, team1=='Kentucky')
mirror <- function(score) {#
  mirror <- data.frame(#
    record_id=score$record_id,#
    year=score$year,#
    team1=score$team2,#
    team1_score=score$team2_score,#
    team2=score$team1,#
    team2_score=score$team1_score#
  )#
  return(rbind(mirror, score))#
}
score <- mirror(score)
subset(score, team1=='Kentucky')
Run script#
run <- function() {#
  score <- mirror(score)#
  adjusted <- iterAdjust(1)#
  write.csv(adjusted, 'ncaa_2015_diffs.csv')#
}#
run()
run()
x <- subset(score, team1=='Kentucky')
y <- subset(score, team1=='Duke')
(x$team1_score + y$team1_score + x$team2_score + y$team2_score)/2
(median(x$team1_score) + median(y$team1_score) + median(x$team2_score) + median(y$team2_score))/2
