performance
View(performance)
performance %>%
filter(team1 == 'Duke')
teams = conference %>% pull(team)
scoreConferenceTeams = scoreTmp %>%
filter(team1 %in% teams) %>%
filter(team2 %in% teams)
scoreFlipped <- data.frame(
year=scoreConferenceTeams$year,
team1=scoreConferenceTeams$team2,
team1_score=scoreConferenceTeams$team2_score,
team2=scoreConferenceTeams$team1,
team2_score=scoreConferenceTeams$team1_score
)
score <- rbind(scoreFlipped, scoreConferenceTeams)
#We need a "%!in%" operation for later on
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
#A team's conference
getConference = function(teamName) {
conference %>%
filter(team == teamName) %>%
pull(conference) %>%
first
}
#All teams in a conference
teamsInConference = function(conferenceName) {
conference %>%
filter(conference == conferenceName) %>%
pull(team)
}
#Games against a same-conference opponent
inConferenceGames = function(teamName) {
conferenceTeams = teamsInConference(getConference(teamName))
score %>%
filter(team1 == teamName) %>%
filter(team2 %in% conferenceTeams)
}
#Median scoring differential when playing an in-conference opponent
medianInConferenceDiff = function(teamName) {
diffs = inConferenceGames(teamName) %>%
mutate(diff = team1_score - team2_score) %>%
pull(diff)
median_diff = median(diffs)
if (is.na(median_diff)) {
return(0)
} else {
return(median_diff)
}
}
#Teams in the bracket
#TODO:  REVERT THIS BACK TO BRACKET
getBracketTeams  = function() {
conference %>%
pull(team)
}
#Games against the bracket teams
#Exclude bracket teams in conference because we want to get a sense of how the
#team plays against good teams outside the conference
conferenceBracketGames = function(teamName) {
score %>%
filter(team1 %in% teamsInConference(getConference(teamName))) %>%
filter(team2 %in% getBracketTeams()) %>%
filter(team2 %!in% teamsInConference(getConference(teamName)))
}
#Games against opponents outside of the conference
outConferenceGames = function(teamName) {
score %>%
filter(team1 %in% teamsInConference(getConference(teamName))) %>%
filter(team2 %!in% teamsInConference(getConference(teamName)))
}
#Median scoring differential for a conference when playing a tournament team
medianConferenceDiff = function(teamName) {
diffs = conferenceBracketGames(teamName) %>%
mutate(diff = team1_score - team2_score) %>%
pull(diff)
median(diffs)
}
#Spread for one opponent
getSpread = function(teamName) {
confDiff = medianConferenceDiff(teamName)
inConfDiff = medianInConferenceDiff(teamName)
confDiff + inConfDiff
}
#Scoring differentials adjusted for spread
mutateApproxAdjustedDiff = function(score) {
spreads = data.frame(
team = conference$team,
spread = conference %>%
pull(team) %>%
lapply(getSpread) %>%
unlist
)
left_join(score, spreads, by = c('team2' = 'team')) %>%
mutate(diff = team1_score - team2_score) %>%
mutate(adjusted = diff + spread)
}
#Scoring differentials adjusted for spread
mutatePreciseAdjustedDiff = function(adjusted) {
precise_spreads = mutateApproxAdjustedDiff(score) %>%
group_by(team1) %>%
summarize(precise_spread = median(adjusted)) %>%
rename(team = team1)
left_join(adjusted, precise_spreads, by = c('team2' = 'team')) %>%
mutate(performance_score = team1_score - team2_score + precise_spread)
}
#Very Weak, Somewhat Weak, Decent, Good, Great
mutateQuality = function(adjusted) {
if(team1_score > team2_score) 'Good' else 'Weak'
}
performance = score %>%
mutateApproxAdjustedDiff %>%
mutatePreciseAdjustedDiff
performance = score %>%
mutateApproxAdjustedDiff %>%
mutatePreciseAdjustedDiff %>%
mutateQuality
#Very Weak, Somewhat Weak, Decent, Good, Great
mutateQuality = function(adjusted) {
adjusted %>%
mutate(quality = if(team1_score > team2_score) 'Good' else 'Weak')
}
performance = score %>%
mutateApproxAdjustedDiff %>%
mutatePreciseAdjustedDiff %>%
mutateQuality
#Very Weak, Somewhat Weak, Decent, Good, Great
mutateQuality = function(adjusted) {
adjusted %>%
mutate(quality = 'Good')
}
performance = score %>%
mutateApproxAdjustedDiff %>%
mutatePreciseAdjustedDiff %>%
mutateQuality
teams = conference %>% pull(team)
scoreConferenceTeams = scoreTmp %>%
filter(team1 %in% teams) %>%
filter(team2 %in% teams)
scoreFlipped <- data.frame(
year=scoreConferenceTeams$year,
team1=scoreConferenceTeams$team2,
team1_score=scoreConferenceTeams$team2_score,
team2=scoreConferenceTeams$team1,
team2_score=scoreConferenceTeams$team1_score
)
score <- rbind(scoreFlipped, scoreConferenceTeams)
#We need a "%!in%" operation for later on
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
#A team's conference
getConference = function(teamName) {
conference %>%
filter(team == teamName) %>%
pull(conference) %>%
first
}
#All teams in a conference
teamsInConference = function(conferenceName) {
conference %>%
filter(conference == conferenceName) %>%
pull(team)
}
#Games against a same-conference opponent
inConferenceGames = function(teamName) {
conferenceTeams = teamsInConference(getConference(teamName))
score %>%
filter(team1 == teamName) %>%
filter(team2 %in% conferenceTeams)
}
#Median scoring differential when playing an in-conference opponent
medianInConferenceDiff = function(teamName) {
diffs = inConferenceGames(teamName) %>%
mutate(diff = team1_score - team2_score) %>%
pull(diff)
median_diff = median(diffs)
if (is.na(median_diff)) {
return(0)
} else {
return(median_diff)
}
}
#Teams in the bracket
#TODO:  REVERT THIS BACK TO BRACKET
getBracketTeams  = function() {
conference %>%
pull(team)
}
#Games against the bracket teams
#Exclude bracket teams in conference because we want to get a sense of how the
#team plays against good teams outside the conference
conferenceBracketGames = function(teamName) {
score %>%
filter(team1 %in% teamsInConference(getConference(teamName))) %>%
filter(team2 %in% getBracketTeams()) %>%
filter(team2 %!in% teamsInConference(getConference(teamName)))
}
#Games against opponents outside of the conference
outConferenceGames = function(teamName) {
score %>%
filter(team1 %in% teamsInConference(getConference(teamName))) %>%
filter(team2 %!in% teamsInConference(getConference(teamName)))
}
#Median scoring differential for a conference when playing a tournament team
medianConferenceDiff = function(teamName) {
diffs = conferenceBracketGames(teamName) %>%
mutate(diff = team1_score - team2_score) %>%
pull(diff)
median(diffs)
}
#Spread for one opponent
getSpread = function(teamName) {
confDiff = medianConferenceDiff(teamName)
inConfDiff = medianInConferenceDiff(teamName)
confDiff + inConfDiff
}
#Scoring differentials adjusted for spread
mutateApproxAdjustedDiff = function(score) {
spreads = data.frame(
team = conference$team,
spread = conference %>%
pull(team) %>%
lapply(getSpread) %>%
unlist
)
left_join(score, spreads, by = c('team2' = 'team')) %>%
mutate(diff = team1_score - team2_score) %>%
mutate(adjusted = diff + spread) %>%
mutate(quality = if(team1_score > team2_score) 'Good' else 'Bad')
}
#Scoring differentials adjusted for spread
mutatePreciseAdjustedDiff = function(adjusted) {
precise_spreads = mutateApproxAdjustedDiff(score) %>%
group_by(team1) %>%
summarize(precise_spread = median(adjusted)) %>%
rename(team = team1)
left_join(adjusted, precise_spreads, by = c('team2' = 'team')) %>%
mutate(performance_score = team1_score - team2_score + precise_spread)
}
performance %>%
filter(team1 == 'Duke')
teams = conference %>% pull(team)
scoreConferenceTeams = scoreTmp %>%
filter(team1 %in% teams) %>%
filter(team2 %in% teams)
scoreFlipped <- data.frame(
year=scoreConferenceTeams$year,
team1=scoreConferenceTeams$team2,
team1_score=scoreConferenceTeams$team2_score,
team2=scoreConferenceTeams$team1,
team2_score=scoreConferenceTeams$team1_score
)
score <- rbind(scoreFlipped, scoreConferenceTeams)
#We need a "%!in%" operation for later on
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
#A team's conference
getConference = function(teamName) {
conference %>%
filter(team == teamName) %>%
pull(conference) %>%
first
}
#All teams in a conference
teamsInConference = function(conferenceName) {
conference %>%
filter(conference == conferenceName) %>%
pull(team)
}
#Games against a same-conference opponent
inConferenceGames = function(teamName) {
conferenceTeams = teamsInConference(getConference(teamName))
score %>%
filter(team1 == teamName) %>%
filter(team2 %in% conferenceTeams)
}
#Median scoring differential when playing an in-conference opponent
medianInConferenceDiff = function(teamName) {
diffs = inConferenceGames(teamName) %>%
mutate(diff = team1_score - team2_score) %>%
pull(diff)
median_diff = median(diffs)
if (is.na(median_diff)) {
return(0)
} else {
return(median_diff)
}
}
#Teams in the bracket
#TODO:  REVERT THIS BACK TO BRACKET
getBracketTeams  = function() {
conference %>%
pull(team)
}
#Games against the bracket teams
#Exclude bracket teams in conference because we want to get a sense of how the
#team plays against good teams outside the conference
conferenceBracketGames = function(teamName) {
score %>%
filter(team1 %in% teamsInConference(getConference(teamName))) %>%
filter(team2 %in% getBracketTeams()) %>%
filter(team2 %!in% teamsInConference(getConference(teamName)))
}
#Games against opponents outside of the conference
outConferenceGames = function(teamName) {
score %>%
filter(team1 %in% teamsInConference(getConference(teamName))) %>%
filter(team2 %!in% teamsInConference(getConference(teamName)))
}
#Median scoring differential for a conference when playing a tournament team
medianConferenceDiff = function(teamName) {
diffs = conferenceBracketGames(teamName) %>%
mutate(diff = team1_score - team2_score) %>%
pull(diff)
median(diffs)
}
#Spread for one opponent
getSpread = function(teamName) {
confDiff = medianConferenceDiff(teamName)
inConfDiff = medianInConferenceDiff(teamName)
confDiff + inConfDiff
}
#Scoring differentials adjusted for spread
mutateApproxAdjustedDiff = function(score) {
spreads = data.frame(
team = conference$team,
spread = conference %>%
pull(team) %>%
lapply(getSpread) %>%
unlist
)
left_join(score, spreads, by = c('team2' = 'team')) %>%
mutate(diff = team1_score - team2_score) %>%
mutate(adjusted = diff + spread) %>%
mutate(quality = ifelse(team1_score > team2_score, 'Good', 'Bad'))
}
#Scoring differentials adjusted for spread
mutatePreciseAdjustedDiff = function(adjusted) {
precise_spreads = mutateApproxAdjustedDiff(score) %>%
group_by(team1) %>%
summarize(precise_spread = median(adjusted)) %>%
rename(team = team1)
left_join(adjusted, precise_spreads, by = c('team2' = 'team')) %>%
mutate(performance_score = team1_score - team2_score + precise_spread)
}
performance %>%
filter(team1 == 'Duke')
teams = conference %>% pull(team)
scoreConferenceTeams = scoreTmp %>%
filter(team1 %in% teams) %>%
filter(team2 %in% teams)
scoreFlipped <- data.frame(
year=scoreConferenceTeams$year,
team1=scoreConferenceTeams$team2,
team1_score=scoreConferenceTeams$team2_score,
team2=scoreConferenceTeams$team1,
team2_score=scoreConferenceTeams$team1_score
)
score <- rbind(scoreFlipped, scoreConferenceTeams)
#We need a "%!in%" operation for later on
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
#A team's conference
getConference = function(teamName) {
conference %>%
filter(team == teamName) %>%
pull(conference) %>%
first
}
#All teams in a conference
teamsInConference = function(conferenceName) {
conference %>%
filter(conference == conferenceName) %>%
pull(team)
}
#Games against a same-conference opponent
inConferenceGames = function(teamName) {
conferenceTeams = teamsInConference(getConference(teamName))
score %>%
filter(team1 == teamName) %>%
filter(team2 %in% conferenceTeams)
}
#Median scoring differential when playing an in-conference opponent
medianInConferenceDiff = function(teamName) {
diffs = inConferenceGames(teamName) %>%
mutate(diff = team1_score - team2_score) %>%
pull(diff)
median_diff = median(diffs)
if (is.na(median_diff)) {
return(0)
} else {
return(median_diff)
}
}
#Teams in the bracket
#TODO:  REVERT THIS BACK TO BRACKET
getBracketTeams  = function() {
conference %>%
pull(team)
}
#Games against the bracket teams
#Exclude bracket teams in conference because we want to get a sense of how the
#team plays against good teams outside the conference
conferenceBracketGames = function(teamName) {
score %>%
filter(team1 %in% teamsInConference(getConference(teamName))) %>%
filter(team2 %in% getBracketTeams()) %>%
filter(team2 %!in% teamsInConference(getConference(teamName)))
}
#Games against opponents outside of the conference
outConferenceGames = function(teamName) {
score %>%
filter(team1 %in% teamsInConference(getConference(teamName))) %>%
filter(team2 %!in% teamsInConference(getConference(teamName)))
}
#Median scoring differential for a conference when playing a tournament team
medianConferenceDiff = function(teamName) {
diffs = conferenceBracketGames(teamName) %>%
mutate(diff = team1_score - team2_score) %>%
pull(diff)
median(diffs)
}
#Spread for one opponent
getSpread = function(teamName) {
confDiff = medianConferenceDiff(teamName)
inConfDiff = medianInConferenceDiff(teamName)
confDiff + inConfDiff
}
#Scoring differentials adjusted for spread
mutateApproxAdjustedDiff = function(score) {
spreads = data.frame(
team = conference$team,
spread = conference %>%
pull(team) %>%
lapply(getSpread) %>%
unlist
)
left_join(score, spreads, by = c('team2' = 'team')) %>%
mutate(diff = team1_score - team2_score) %>%
mutate(adjusted = diff + spread) %>%
mutate(quality = ifelse(spread > 8, 'Good', 'Bad'))
}
#Scoring differentials adjusted for spread
mutatePreciseAdjustedDiff = function(adjusted) {
precise_spreads = mutateApproxAdjustedDiff(score) %>%
group_by(team1) %>%
summarize(precise_spread = median(adjusted)) %>%
rename(team = team1)
left_join(adjusted, precise_spreads, by = c('team2' = 'team')) %>%
mutate(performance_score = team1_score - team2_score + precise_spread)
}
#Scoring differentials adjusted for spread
mutatePreciseAdjustedDiff = function(adjusted) {
precise_spreads = mutateApproxAdjustedDiff(score) %>%
group_by(team1) %>%
summarize(precise_spread = median(adjusted)) %>%
rename(team = team1)
left_join(adjusted, precise_spreads, by = c('team2' = 'team')) %>%
mutate(performance_score = team1_score - team2_score + precise_spread)
performance = score %>%
mutateApproxAdjustedDiff %>%
mutatePreciseAdjustedDiff
#Scoring differentials adjusted for spread
mutateApproxAdjustedDiff = function(score) {
spreads = data.frame(
team = conference$team,
spread = conference %>%
pull(team) %>%
lapply(getSpread) %>%
unlist
)
left_join(score, spreads, by = c('team2' = 'team')) %>%
mutate(diff = team1_score - team2_score) %>%
mutate(adjusted = diff + spread) %>%
mutate(quality = ifelse(spread > 8, 'Good', 'Bad'))
}
#Scoring differentials adjusted for spread
mutatePreciseAdjustedDiff = function(adjusted) {
precise_spreads = mutateApproxAdjustedDiff(score) %>%
group_by(team1) %>%
summarize(precise_spread = median(adjusted)) %>%
rename(team = team1)
left_join(adjusted, precise_spreads, by = c('team2' = 'team')) %>%
mutate(performance_score = team1_score - team2_score + precise_spread)
performance = score %>%
mutateApproxAdjustedDiff %>%
mutatePreciseAdjustedDiff
#Scoring differentials adjusted for spread
mutateApproxAdjustedDiff = function(score) {
spreads = data.frame(
team = conference$team,
spread = conference %>%
pull(team) %>%
lapply(getSpread) %>%
unlist
)
left_join(score, spreads, by = c('team2' = 'team')) %>%
mutate(diff = team1_score - team2_score) %>%
mutate(adjusted = diff + spread) %>%
mutate(quality = ifelse(spread > 8, 'Good', 'Bad'))
}
#Scoring differentials adjusted for spread
mutatePreciseAdjustedDiff = function(adjusted) {
precise_spreads = mutateApproxAdjustedDiff(score) %>%
group_by(team1) %>%
summarize(precise_spread = median(adjusted)) %>%
rename(team = team1)
left_join(adjusted, precise_spreads, by = c('team2' = 'team')) %>%
mutate(performance_score = team1_score - team2_score + precise_spread)
performance = score %>%
mutateApproxAdjustedDiff %>%
mutatePreciseAdjustedDiff
}
performance %>%
filter(team1 == 'Duke')
